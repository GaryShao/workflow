// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFood.DataAccess.Migrator;

namespace SFood.DataAccess.Migrator.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    [Migration("20190129121948_TryFixBug")]
    partial class TryFixBug
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SFood.DataAccess.Models.ArchivedOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("BillId")
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(15);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DeliveryType")
                        .IsRequired();

                    b.Property<string>("FetchNumber")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDishPacked");

                    b.Property<bool>("IsMerchantCanceled");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Note")
                        .HasMaxLength(500);

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<byte>("PaymentType");

                    b.Property<string>("RefusedReason")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("SeatId")
                        .HasMaxLength(32);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .HasMaxLength(32);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CenterId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SeatId");

                    b.ToTable("Archives","OrderInfo");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Bill", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsPaid");

                    b.Property<string>("OrderId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("Bills","OrderInfo");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.CountryCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100);

                    b.Property<string>("FlagUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CountryCodes","Common");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Customization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CategoryId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<byte>("Index");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Customizations","Dish");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.CustomizationCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("FromId")
                        .HasMaxLength(32);

                    b.Property<byte>("Index");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMultiple");

                    b.Property<bool>("IsSelected");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<byte>("MaxOptions");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantCategoryId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("CustomizationCategories","Dish");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.DealingOrder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(15);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DeliveryType")
                        .IsRequired();

                    b.Property<string>("Dishes")
                        .HasMaxLength(2000);

                    b.Property<string>("FetchNumber")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDishPacked");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Note")
                        .HasMaxLength(500);

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<byte>("PaymentType");

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("SeatId")
                        .HasMaxLength(32);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .HasMaxLength(32);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SeatId");

                    b.ToTable("Dealings","OrderInfo");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Dish", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Icon")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<int>("SalesVolumeAnnual");

                    b.Property<int>("SalesVolumeManual");

                    b.Property<int>("SalesVolumeMonth");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Dishes","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.DishCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<byte>("Index");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("MenuId")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DishCategories","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.HawkerCenter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DetailAddress")
                        .HasMaxLength(500);

                    b.Property<string>("District")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("BasicInfos","HawkerCenter");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.HawkerCenterBanner", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndAt");

                    b.Property<DateTime>("StartAt");

                    b.Property<string>("TargetUrl")
                        .HasMaxLength(1000);

                    b.Property<int>("Visit");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Banners","HawkerCenter");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.HawkerCenterDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<int>("AmountOfRestaurants");

                    b.Property<int>("Capacity");

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<string>("ContactName")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("FundFlow");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.HasKey("Id");

                    b.HasIndex("CenterId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL");

                    b.ToTable("Details","HawkerCenter");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserExtension", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CountryCodeId")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<string>("NickName")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("StaffStatus");

                    b.Property<string>("UserId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExtensions","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(32);

                    b.Property<string>("RoleId")
                        .HasMaxLength(32);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(32);

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens","IdentitySchema");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantImageCategory");

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Images","Common");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.LocalizationModels.Language", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Languages","Localization");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.LocalizationModels.Resource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Key")
                        .HasMaxLength(100);

                    b.Property<string>("LanguageId")
                        .HasMaxLength(32);

                    b.Property<string>("Value")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId", "Key")
                        .IsUnique()
                        .HasFilter("[LanguageId] IS NOT NULL AND [Key] IS NOT NULL");

                    b.ToTable("Resources","Localization");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Menu", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<short>("BeginTime");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<short>("EndTime");

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Menus","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime?>("AnyToClosed");

                    b.Property<DateTime?>("CookingToDeliveOrTaking");

                    b.Property<DateTime?>("DeliveOrTakingToDone");

                    b.Property<string>("OrderId")
                        .HasMaxLength(32);

                    b.Property<DateTime?>("PendingToCooking");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("Details","OrderInfo");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Qualification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("EditorId")
                        .HasMaxLength(32);

                    b.Property<byte>("Entry");

                    b.Property<bool?>("IsQualified");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("Value")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Qualifications","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Dish_CustomizationCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CustomizationCategoryId");

                    b.Property<string>("DishId");

                    b.HasKey("Id");

                    b.HasIndex("DishId", "CustomizationCategoryId");

                    b.ToTable("Dishes&CustomizationCategories","RelationShip");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Dish_DishCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("DishCategoryId")
                        .HasMaxLength(32);

                    b.Property<string>("DishId")
                        .HasMaxLength(32);

                    b.Property<byte>("Index");

                    b.Property<bool>("IsOnShelf");

                    b.Property<string>("MenuId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("DishCategoryId");

                    b.HasIndex("DishId");

                    b.ToTable("Dishes&Categories","RelationShip");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Order_Dish", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<byte>("Amount");

                    b.Property<string>("DishId")
                        .HasMaxLength(32);

                    b.Property<string>("DishName")
                        .HasMaxLength(100);

                    b.Property<decimal>("DishUnitPrice")
                        .HasColumnType("money");

                    b.Property<string>("OrderId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("Orders&Dishes","RelationShip");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.OrderDish_Customization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CustomizationName")
                        .HasMaxLength(20);

                    b.Property<decimal>("CustomizationUnitPrice")
                        .HasColumnType("money");

                    b.Property<string>("OrderDishId")
                        .HasMaxLength(32);

                    b.Property<string>("OrderId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantId");

                    b.HasKey("Id");

                    b.HasIndex("OrderDishId");

                    b.ToTable("OrderDishes&Customizations","RelationShip");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Restaurant_RestaurantCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantCategoryId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Restaurant&Categories","RelationShip");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Restaurant", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Announcement")
                        .HasMaxLength(500);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("IsDeliverySupport");

                    b.Property<bool>("IsOpened");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Logo")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<byte?>("OrderResponseTime");

                    b.Property<int>("SalesVolumeAnnual")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SalesVolumeManual")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SalesVolumeMonth")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SortWeight")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("BasicInfos","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RestaurantCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Icon")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("SelectedIcon")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Categories","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RestaurantDetail", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("ApplicationType")
                        .IsRequired();

                    b.Property<short?>("ClosedAt");

                    b.Property<string>("CountryCodeId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Introduction")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsReceivingAuto");

                    b.Property<DateTime?>("LastModifiedTime");

                    b.Property<short?>("OpenedAt");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("QualifiedTime");

                    b.Property<string>("RegistrationStatus")
                        .HasMaxLength(30);

                    b.Property<string>("RestaurantId")
                        .HasMaxLength(32);

                    b.Property<string>("RestaurantNo")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId")
                        .IsUnique()
                        .HasFilter("[RestaurantId] IS NOT NULL");

                    b.ToTable("Details","Restaurant");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Seat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("SeatAreaId")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("SeatAreaId");

                    b.ToTable("Seats","HawkerCenter");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.SeatArea", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("CenterId")
                        .HasMaxLength(32);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("SeatAreas","HawkerCenter");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.VerificationCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32);

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("VerificationCodes","Common");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.ArchivedOrder", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId");

                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");

                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("SFood.DataAccess.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Customization", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.CustomizationCategory", "Category")
                        .WithMany("Customizations")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.DealingOrder", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");

                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("SFood.DataAccess.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Dish", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");

                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.DishCategory", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");

                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.HawkerCenterBanner", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.HawkerCenterDetail", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithOne("HawkerCenterDetail")
                        .HasForeignKey("SFood.DataAccess.Models.HawkerCenterDetail", "CenterId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.RoleClaim", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.IdentityModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserClaim", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.IdentityModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserExtension", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("SFood.DataAccess.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserLogin", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.IdentityModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserRole", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.IdentityModels.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SFood.DataAccess.Models.IdentityModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFood.DataAccess.Models.IdentityModels.UserToken", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.IdentityModels.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Image", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Menu", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Dish_CustomizationCategory", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Dish")
                        .WithMany("Dish_CustomizationCategories")
                        .HasForeignKey("DishId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Dish_DishCategory", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.DishCategory", "Category")
                        .WithMany("Dish_DishCategories")
                        .HasForeignKey("DishCategoryId");

                    b.HasOne("SFood.DataAccess.Models.Dish", "Dish")
                        .WithMany("Dish_DishCategories")
                        .HasForeignKey("DishId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Order_Dish", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Dish", "Dish")
                        .WithMany("Order_Dishes")
                        .HasForeignKey("DishId");

                    b.HasOne("SFood.DataAccess.Models.ArchivedOrder", "Order")
                        .WithMany("Order_Dishes")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.OrderDish_Customization", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.RelationshipModels.Order_Dish", "OrderDish")
                        .WithMany("OrderDish_Customizations")
                        .HasForeignKey("OrderDishId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RelationshipModels.Restaurant_RestaurantCategory", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.RestaurantCategory", "RestaurantCategory")
                        .WithMany("Restaurant_RestaurantCategories")
                        .HasForeignKey("RestaurantCategoryId");

                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithMany("Restaurant_RestaurantCategories")
                        .HasForeignKey("RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Restaurant", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany("Restaurants")
                        .HasForeignKey("CenterId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.RestaurantDetail", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.Restaurant", "Restaurant")
                        .WithOne("RestaurantDetail")
                        .HasForeignKey("SFood.DataAccess.Models.RestaurantDetail", "RestaurantId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.Seat", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");

                    b.HasOne("SFood.DataAccess.Models.SeatArea", "Area")
                        .WithMany("Seats")
                        .HasForeignKey("SeatAreaId");
                });

            modelBuilder.Entity("SFood.DataAccess.Models.SeatArea", b =>
                {
                    b.HasOne("SFood.DataAccess.Models.HawkerCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId");
                });
#pragma warning restore 612, 618
        }
    }
}
